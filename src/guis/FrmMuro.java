/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guis;

import daos.PostsDAO;
import exceptions.DAOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import objetosnegocio.Comentario;
import objetosnegocio.Post;
import objetosnegocio.Usuario;

/**
 *
 * @author DssX
 */
public class FrmMuro extends javax.swing.JFrame {

    private static Usuario usuario;
    private final PostsDAO postsDAO;

    public FrmMuro() {
        initComponents();
        this.setLocationRelativeTo(null);
        usuario = FrmInicio.usuarioLogged;
        this.lblUsuario.setText(usuario.getNombre());
        postsDAO = new PostsDAO();
        this.cargarPosts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUsuario = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        txtBuscarTag = new javax.swing.JTextField();
        btnBuscarTag = new javax.swing.JButton();
        btnNuevoPost = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMuro = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Cfg");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnSalir.setText("Logout");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnBuscarTag.setText("Buscar");
        btnBuscarTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarTagActionPerformed(evt);
            }
        });

        btnNuevoPost.setText("Nuevo");
        btnNuevoPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoPostActionPerformed(evt);
            }
        });

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtMuro.setEditable(false);
        txtMuro.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(txtMuro);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnNuevoPost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBuscarTag)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarTag)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSalir)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarTag)
                    .addComponent(btnNuevoPost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        FrmRegistro abrir = new FrmRegistro();
        abrir.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        FrmInicio abrir = new FrmInicio();
        abrir.setVisible(true);
        FrmInicio.usuarioLogged = null;
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnNuevoPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoPostActionPerformed
        FrmPublicacionNueva abrir = new FrmPublicacionNueva();
        abrir.setVisible(true);
    }//GEN-LAST:event_btnNuevoPostActionPerformed

    private void btnBuscarTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarTagActionPerformed
        this.cargarPosts();
    }//GEN-LAST:event_btnBuscarTagActionPerformed

    /**
     * Despliega en la ventana los post y comentarios anexados de la base de datos.
     */
    private void cargarPosts() {
        this.txtMuro.setText("");
        ArrayList<Post> posts = this.postsDAO.buscarTodos();
        for (int i = posts.size(); i > 0; i--) {
            Post post = posts.get(i - 1);
            if (txtBuscarTag.getText().equals("")) {
                try {
                    this.insertarNombres("▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n\n");
                    this.insertarNombres(post.getUsuario().getNombre());
                    this.insertarTexto(" (" + post.getFechaHora().format(DateTimeFormatter.ISO_DATE) + "  -  " + post.getFechaHora().format(DateTimeFormatter.ISO_TIME) + ") ");
                    this.insertarBotonEliminarPost(post);
                    this.insertarNombres("\n");
                    this.insertarTexto("┌------------------------------------------------------------------------------------┐\n  " + post.getContenido() + "\n\n  #" + post.getTags().toString() + "\n");
                    this.insertarTexto("└------------------------------------------------------------------------------------┘\n");
                    if (post.getComentarios() != null) {
                        ArrayList<Comentario> coment = new ArrayList<>();
                        coment.addAll(post.getComentarios());
                        for (int j = 0; j < coment.size(); j++) {
                            coment.get(j);
                            this.insertarNombres("     " + coment.get(j).getUsuario().getNombre());
                            this.insertarTexto(" (" + coment.get(j).getFechaHora().format(DateTimeFormatter.ISO_DATE) + "  -  " + coment.get(j).getFechaHora().format(DateTimeFormatter.ISO_TIME) + ")");
                            if (coment.get(j).getUsuario().equals(usuario)) {
                                int valor = j;
                                JButton btnEliminar = new JButton("X");
                                btnEliminar.addActionListener((event) -> {
                                    int resp = JOptionPane.showConfirmDialog(null, "¿Desea eliminar este comentario?", "Alerta!", JOptionPane.YES_NO_OPTION);
                                    if (resp == 0) {
                                        coment.remove(valor);
                                        post.setComentarios(coment);
                                        try {
                                            postsDAO.actualizar(post);
                                        } catch (DAOException ex) {
                                            System.err.println(ex.getMessage());
                                        }
                                    } else {
                                    }
                                });
                                this.txtMuro.insertComponent(btnEliminar);
                            }

                            this.insertarNombres("\n");
                            this.insertarTexto("    ┌----------------------------------------------------------------------------┐\n      " + coment.get(j).getContenido() + "\n");
                            this.insertarTexto("    └----------------------------------------------------------------------------┘\n");
                        }
                    } else {
                        this.insertarNombres("\n");
                    }
                    JTextField txtComentario = new JTextField();
                    JButton btnAgregarComentario = new JButton("Comentar");
                    btnAgregarComentario.addActionListener((event) -> {
                        int resp = JOptionPane.showConfirmDialog(null, "¿Agregar Comentario?", "Mensage", JOptionPane.YES_NO_OPTION);
                        if (resp == 0) {
                            ArrayList<Comentario> coment = new ArrayList<>();
                            if (post.getComentarios() == null) {
                                Comentario comentario = new Comentario(LocalDateTime.now(), txtComentario.getText(), usuario, post.getId());
                                coment.add(comentario);
                                post.setComentarios(coment);
                                try {
                                    postsDAO.actualizar(post);
                                    this.llamarActualizar();
                                } catch (DAOException ex) {
                                    System.err.println(ex.getMessage());
                                }
                            } else {
                                coment.addAll(post.getComentarios());
                                Comentario comentario = new Comentario(LocalDateTime.now(), txtComentario.getText(), usuario, post.getId());
                                coment.add(comentario);
                                post.setComentarios(coment);
                                try {
                                    postsDAO.actualizar(post);
                                    this.llamarActualizar();
                                } catch (DAOException ex) {
                                    System.err.println(ex.getMessage());
                                }
                            }

                        } else {
                        }
                    });
                    this.txtMuro.insertComponent(txtComentario);
                    this.insertarNombres(" ");
                    this.txtMuro.insertComponent(btnAgregarComentario);
                    this.insertarNombres("\n\n\n\n");

                } catch (BadLocationException ex) {
                    System.err.println(ex.getMessage());
                }
            } else if (!"".equals(txtBuscarTag.getText())) {
                for (int l = 0; l < post.getTags().size(); l++) {
                    if (txtBuscarTag.getText().equals(post.getTags().get(l))) {
                        try {
                            this.insertarNombres("▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n\n");
                            this.insertarNombres(post.getUsuario().getNombre());
                            this.insertarTexto(" (" + post.getFechaHora().format(DateTimeFormatter.ISO_DATE) + "  -  " + post.getFechaHora().format(DateTimeFormatter.ISO_TIME) + ") ");
                            this.insertarBotonEliminarPost(post);
                            this.insertarNombres("\n");
                            this.insertarTexto("┌------------------------------------------------------------------------------------┐\n  " + post.getContenido() + "\n\n  #" + post.getTags().toString() + "\n");
                            this.insertarTexto("└------------------------------------------------------------------------------------┘\n");
                            if (post.getComentarios() != null) {
                                ArrayList<Comentario> coment = new ArrayList<>();
                                coment.addAll(post.getComentarios());
                                for (int j = 0; j < coment.size(); j++) {
                                    coment.get(j);
                                    this.insertarNombres("     " + coment.get(j).getUsuario().getNombre());
                                    this.insertarTexto(" (" + coment.get(j).getFechaHora().format(DateTimeFormatter.ISO_DATE) + "  -  " + coment.get(j).getFechaHora().format(DateTimeFormatter.ISO_TIME) + ")");
                                    if (coment.get(j).getUsuario().equals(usuario)) {
                                        int valor = j;
                                        JButton btnEliminar = new JButton("X");
                                        btnEliminar.addActionListener((event) -> {
                                            int resp = JOptionPane.showConfirmDialog(null, "¿Desea eliminar este comentario?", "Alerta!", JOptionPane.YES_NO_OPTION);
                                            if (resp == 0) {
                                                coment.remove(valor);
                                                post.setComentarios(coment);
                                                try {
                                                    postsDAO.actualizar(post);
                                                    this.llamarActualizar();
                                                } catch (DAOException ex) {
                                                    System.err.println(ex.getMessage());
                                                }
                                            } else {
                                            }
                                        });
                                        this.txtMuro.insertComponent(btnEliminar);
                                    }

                                    this.insertarNombres("\n");
                                    this.insertarTexto("    ┌----------------------------------------------------------------------------┐\n      " + coment.get(j).getContenido() + "\n");
                                    this.insertarTexto("    └----------------------------------------------------------------------------┘\n");
                                }
                            } else {
                                this.insertarNombres("\n");
                            }
                            JTextField txtComentario = new JTextField();
                            JButton btnAgregarComentario = new JButton("Comentar");
                            btnAgregarComentario.addActionListener((event) -> {
                                int resp = JOptionPane.showConfirmDialog(null, "¿Agregar Comentario?", "Mensage", JOptionPane.YES_NO_OPTION);
                                if (resp == 0) {
                                    ArrayList<Comentario> coment = new ArrayList<>();
                                    if (post.getComentarios() == null) {
                                        Comentario comentario = new Comentario(LocalDateTime.now(), txtComentario.getText(), usuario, post.getId());
                                        coment.add(comentario);
                                        post.setComentarios(coment);
                                        try {
                                            postsDAO.actualizar(post);
                                            this.llamarActualizar();
                                        } catch (DAOException ex) {
                                            System.err.println(ex.getMessage());
                                        }
                                    } else {
                                        coment.addAll(post.getComentarios());
                                        Comentario comentario = new Comentario(LocalDateTime.now(), txtComentario.getText(), usuario, post.getId());
                                        coment.add(comentario);
                                        post.setComentarios(coment);
                                        try {
                                            postsDAO.actualizar(post);
                                            this.llamarActualizar();
                                        } catch (DAOException ex) {
                                            System.err.println(ex.getMessage());
                                        }
                                    }

                                } else {
                                }
                            });
                            this.txtMuro.insertComponent(txtComentario);
                            this.insertarNombres(" ");
                            this.txtMuro.insertComponent(btnAgregarComentario);
                            this.insertarNombres("\n\n\n\n");

                        } catch (BadLocationException ex) {
                            System.err.println(ex.getMessage());
                        }
                    }
                }
            }
        }
        this.inicioPanel();
    }

    /**
     * centra la posicion de la ventana del muro
     */
    private void inicioPanel() {
        txtMuro.setCaretPosition(0);
    }
    
    /**
     * actualiza la informacion de los post del muro volviendo a leer la base de datos
     */
    private void llamarActualizar(){
        this.cargarPosts();
    }
    
    /**
     * ventana de confirmacion para la eliminacion de una publicacion propia
     * @param post 
     */
    private void insertarBotonEliminarPost(Post post) {
        if (post.getUsuario().equals(usuario)) {
            JButton btnEliminar = new JButton("X");
            btnEliminar.addActionListener((event) -> {
                int resp = JOptionPane.showConfirmDialog(null, "¿Desea eliminar esta publicacion?", "Alerta!", JOptionPane.YES_NO_OPTION);
                if (resp == 0) {
                    try {
                        postsDAO.eliminar(post);
                        this.llamarActualizar();
                    } catch (DAOException ex) {
                        System.err.println(ex.getMessage());
                    }
                } else {
                }
            });
            this.txtMuro.insertComponent(btnEliminar);
        }
    }

    /**
     * se encarga de agregar el nombre del dueño de cada publicacion o comentario
     * @param texto
     * @throws BadLocationException 
     */
    private void insertarNombres(String texto) throws BadLocationException {
        SimpleAttributeSet atributosTexto = new SimpleAttributeSet();
        StyleConstants.setBold(atributosTexto, true);
        StyledDocument documento = this.txtMuro.getStyledDocument();
        documento.insertString(
                documento.getLength(),
                texto,
                atributosTexto);
    }

    /**
     * Se encarga de cargar el texto de los comentarios leidos en la base de datos.
     * @param texto
     * @throws BadLocationException 
     */
    private void insertarTexto(String texto) throws BadLocationException {
        SimpleAttributeSet atributosTexto = new SimpleAttributeSet();
        StyledDocument documento = this.txtMuro.getStyledDocument();
        documento.insertString(
                documento.getLength(),
                texto,
                atributosTexto);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarTag;
    private javax.swing.JButton btnNuevoPost;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTextField txtBuscarTag;
    private javax.swing.JTextPane txtMuro;
    // End of variables declaration//GEN-END:variables
}
